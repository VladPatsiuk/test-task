{"version":3,"sources":["components/MonthPicker/MonthPicker.jsx","components/UsersList/User/User.jsx","components/UsersList/UsersList.jsx","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["MonthPicker","props","useState","Array","fill","colors","setColors","useEffect","usersCount","map","count","colorForEachNumber","users","reduce","acc","user","Date","dob","getMonth","className","month","index","key","onMouseEnter","onMouseLeave","role","aria-label","User","firstName","lastName","UsersList","Hint","length","id","axios","create","baseURL","responseType","App","setUsers","activeUsers","setActiveUsers","a","API","get","result","data","fetchData","currentMonthUsers","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6UA+CeA,G,YA5CK,SAACC,GAEnB,IAF6B,EAKDC,mBAAS,IAAIC,MAAM,IAAIC,KAAK,KAL3B,mBAKtBC,EALsB,KAKdC,EALc,KA8B7B,OANAC,qBAAU,WACR,IACIF,EAXqB,SAACG,GAC1B,OAAOA,EAAWC,KAAI,SAAAC,GACpB,OAAIA,EAAQ,GAAW,MACdA,EAAQ,EAAU,QAClBA,EAAQ,EAAU,OACf,UAMDC,CADsBV,EAAMW,MAjB5BC,QAAO,SAACC,EAAKC,GAGxB,OADAD,EADuB,IAAIE,KAAKD,EAAKE,KAAKC,cAEnCJ,IACN,IAAIX,MAAM,IAAIC,KAAK,KAetBE,EAAUD,KACT,CAACJ,EAAMW,QAGR,yBAAKO,UAAU,UACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,oBA/BN,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OACvD,SAAS,YAAY,UAAU,WAAW,YA+BpCV,KAAI,SAACW,EAAOC,GAAR,OAAkB,wBAAIC,IAAKF,EAAQG,aAAc,kBAAMtB,EAAMiB,SAASG,IAAQG,aAAc,kBAAMvB,EAAMiB,SAAS,QAAO,yBAAKC,UAAS,UAAKd,EAAOgB,KAAWD,OACzK,4BAAI,yBAAKD,UAAU,SAAQ,0BAAMM,KAAK,MAAMC,aAAW,QAA5B,iBC1BtBC,G,YATF,SAAC1B,GAEZ,OACE,yBAAKkB,UAAU,QACZlB,EAAMc,KAAKa,UADd,IAC0B3B,EAAMc,KAAKc,YCyB1BC,EA5BG,SAAC7B,GAEjB,IAAM8B,EACJ,yBAAKZ,UAAU,eACb,uCAAY,0BAAMM,KAAK,MAAMC,aAAW,eAA5B,iBACZ,4DAIJ,OACE,yBAAKP,UAAU,SACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,gBACb,+CAAmB,0BAAMM,KAAK,MAAMC,aAAW,QAA5B,gBAAnB,MAGuB,IAAvBzB,EAAMW,MAAMoB,OACV,4BACG/B,EAAMW,MAAMH,KAAI,SAAAM,GAAI,OAAI,wBAAIO,IAAKP,EAAKkB,IAAI,kBAAC,EAAD,CAAMlB,KAAMA,SAEzDgB,K,QCtBGG,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,sDACTC,aAAc,SC8BDC,EA5BH,WAAO,IAAD,EAEUpC,mBAAS,IAFnB,mBAETU,EAFS,KAEF2B,EAFE,OAGsBrC,mBAAS,IAH/B,mBAGTsC,EAHS,KAGIC,EAHJ,KAKhBlC,qBAAU,WAAM,4CACd,4BAAAmC,EAAA,sEACuBC,EAAIC,IACvB,eAFJ,OACQC,EADR,OAIEN,EAASM,EAAOC,MAJlB,4CADc,uBAAC,WAAD,wBAOdC,KACG,IAOL,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,CAAaP,MAAOA,EAAOM,SAPd,SAACE,GAChB,IAAM4B,EAAoBpC,EAAMqC,QAAO,SAAAlC,GAAI,OAAI,IAAIC,KAAKD,EAAKE,KAAKC,aAAeE,KACjFqB,EAAeO,MAMb,kBAAC,EAAD,CAAWpC,MAAO4B,MCjBJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7cab90a4.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport './MonthPicker.scss'\r\n\r\nconst MonthPicker = (props) => {\r\n\r\n  const months= [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\r\n            \"August\",\"September\",\"October\",\"November\",\"December\"];\r\n\r\n  const [colors, setColors] = useState(new Array(12).fill(\"\"))\r\n\r\n  const usersForEachMonth = (users) => {\r\n    return users.reduce((acc, user) => {\r\n      let currentUserMonth = new Date(user.dob).getMonth()\r\n      acc[currentUserMonth]++;\r\n      return acc\r\n    }, new Array(12).fill(0))\r\n  }\r\n\r\n  const colorForEachNumber = (usersCount) => {\r\n    return usersCount.map(count => {\r\n      if (count > 11) return \"red\"\r\n      else if (count > 7) return \"green\"\r\n      else if (count > 3) return \"blue\"\r\n      else return \"grey\"\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    let usersCount = usersForEachMonth(props.users)\r\n    let colors = colorForEachNumber(usersCount)\r\n    setColors(colors)\r\n  }, [props.users])      \r\n    \r\n  return (\r\n    <div className=\"months\">\r\n      <div className=\"box\">\r\n        <ul className='circle-container'>\r\n          {months.map((month, index) => <li key={month}  onMouseEnter={() => props.getMonth(index)} onMouseLeave={() => props.getMonth(null)}><div className={`${colors[index]}`}>{month}</div></li>)}\r\n          <li><div className=\"start\"><span role=\"img\" aria-label=\"star\">‚≠ê</span></div></li>\r\n        </ul>\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default MonthPicker;\r\n\r\n","import React from 'react'\r\nimport './User.scss'\r\n\r\nconst User = (props) => {\r\n\r\n  return (\r\n    <div className=\"user\">\r\n      {props.user.firstName} {props.user.lastName}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport './UsersList.scss';\r\nimport User from './User/User';\r\n\r\nconst UsersList = (props) => {\r\n  \r\n  const Hint = (\r\n    <div className=\"users__hint\">\r\n      <p>Hi there <span role=\"img\" aria-label=\"waving-hand\">üëã</span></p>\r\n      <p>Please hover over any month!</p>        \r\n      </div>\r\n    )\r\n\r\n  return (\r\n    <div className=\"users\">\r\n      <div className=\"users__container\">\r\n        <div className=\"users__title\">\r\n          <p>\\ Awesome dudes <span role=\"img\" aria-label=\"eyes\">üëÄ</span>/</p>\r\n        </div>\r\n        {\r\n          props.users.length !== 0 ? \r\n            <ul>\r\n              {props.users.map(user => <li key={user.id}><User user={user} /></li>)}\r\n            </ul> :\r\n            Hint\r\n        }\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UsersList;","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://yalantis-react-school-api.yalantis.com/api/\",\r\n  responseType: \"json\"\r\n});","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport MonthPicker from './components/MonthPicker/MonthPicker';\nimport UsersList from './components/UsersList/UsersList';\nimport API from \"./utils/API\";\n\nconst App = () => {\n\n  const [users, setUsers] = useState([])\n  const [activeUsers, setActiveUsers] = useState([])\n\n  useEffect(() => {\n    async function fetchData() {\n      const result = await API.get(\n        'task0/users'\n      )\n      setUsers(result.data)\n    }\n    fetchData()\n    }, [])\n\n  const getMonth = (month) => {\n    const currentMonthUsers = users.filter(user => new Date(user.dob).getMonth() === month)\n    setActiveUsers(currentMonthUsers)\n  }\n  \n  return (\n    <div className=\"app\">\n      <MonthPicker users={users} getMonth={getMonth}/>\n      <UsersList users={activeUsers}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}